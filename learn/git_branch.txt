gitの管理ブランチ関連

ローカル：
  demo-git-flow/
    └─ Gitリポジトリ（初期状態）
         └─ mainブランチ ← 幹（最初にあるもの）

GitHub：
  origin = https://github.com/あなた/demo-git-flow.git
    └─ main（幹）
    └─ feature/login
    └─ bugfix/hoge

https://qiita.com/y-tsutsu/items/2ba96b16b220fb5913be

Gitブランチ基礎とリモートへの反映まとめ

1. ブランチを切る意味
--------------------
- ブランチは開発を「枝分かれ」させることで、作業を独立させる仕組み。
- main（本流）から分岐して別の作業を進められる。
- ブランチごとに独立した開発ができ、安定したmainを汚さずに済む。

2. ブランチの特徴
-----------------
- ローカルで作成したブランチは、そのままローカル環境内で独立している。
- 各ブランチの変更は他のブランチに影響しない。
- 変更を他のブランチに反映させたい場合は「マージ」や「チェリーピック」が必要。

3. リモートリポジトリとorigin
------------------------------
- `git remote add origin <URL>` は、ローカルリポジトリにリモートリポジトリ（GitHub等）を
  "origin"という名前で紐づけるコマンド。
- originはニックネームで、複数登録も可能。
- clone時は自動でoriginが設定される。

4. ローカルでブランチを切って開発を進める
------------------------------------------
- VS CodeやCLIでブランチを切り替えることで、別々の開発エリアを切り替えられる。
- `git status` で現在のブランチや変更状態を確認できる。
- 未追跡ファイル（Untracked files）は、`git add` で管理対象にできる。

5. ローカルのブランチをリモートに反映（push）する方法
-------------------------------------------------------
1. ブランチを作る・切り替える
git checkout -b feature/my-feature

2. 作業をコミット
git add .
git commit -m "Add my new feature"

3. リモートにプッシュ（初回は -u 付き）
git push -u origin feature/my-feature

4. GitHub上でプルリクエストを作成し、レビュー・マージする

6. ブランチ運用のポイント
--------------------------
- コミットは「今チェックアウト中のブランチに対してのみ行われる」。
- 他のブランチに変更を反映したい場合は、マージやチェリーピックを使う。
- ブランチを使うことで、チームでの並行開発が安全かつ効率的になる。

---

もしさらにGit操作やブランチ運用で知りたいことがあれば、いつでも聞いてください！